#!/bin/bash -e

# name: functions.sh
# author: jhosvr
# date: 20180421
# description: functions file to be sourced for usage and organization within the DST scripts

####
#### Error checking functions. Parameter format is $1=object $2=message-to-return $3=action-to-take
####

fail() { echo "${step} ERROR: ${1}" >&2; exit 1; }
fileNotFound() { if [[ ! -e "${1}" ]]; then echo "${2}"; ${3}; fi; }
fileFound() { if [[ -e "${1}" ]]; then echo "${2}"; ${3}; fi; }
varNotSet() { if [[ -z "${1}" ]]; then echo "${2}"; ${3}; fi; }


####
#### Create structure and installation functions
####


create_dstserver_folders() {
  step="[create: dst server folders]"
  echo "${step} Creating dst server instance folders"
  mkdir -p "${dstserverbase}/Master"
  mkdir -p "${dstserverbase}/Caves"
}

create_symlinks() {
  step="[create: symlinks]"
  if [[ ! -L "${base}/servers" ]]; then
    if [[ -d "${base}/servers" ]]; then
      echo "${step} ${base}/servers is a directory, renaming to ${base}/servers-$(date +%Y%m%d-%H%M)"
      mv "${base}/servers" "${base}/servers-$(date +%Y%m%d-%H%M)"
    fi
    echo "${step} creating DST server configs symlinks"
    cd ${base}
    ln -sf "$HOME/.klei/DoNotStarveTogether" servers
  fi
}

install_steamcmd() {
  step="[install: steam cmd]"
  cd "${steamcmddir}"

  echo "${step} retrieving steam cmd package"
  wget -q "${steamcmdurl}" || fail "could not get ${steamcmdpkg} from ${steamcmdurl}"

  echo "${step} extracting steam cmd package"
  tar -xzf "${steamcmdpkg}" || fail "could not extract steamcmd installation"

  echo "${step} removing no longer needed steam cmd tarball"
  rm "${steamcmdpkg}"
  cd "${workdir}"
}

install_dst() {
  step="[install: don't starve together]"
  echo
  ${steamcmddir}/steamcmd.sh +force_install_dir "${dstgamedir}" +login anonymous +app_update 343050 validate +quit
  echo
}


####
#### File generation functions
####


generate_cluster_token() {
  step="[generate: cluster token]"
  echo "${step} Creating cluster token file"
  echo "${cluster_token}" > "${dstserverbase}/cluster_token.txt"
}

generate_server_cluster_ini() {
  step="[generate: cluster.ini]"
  source <(sed -n '/\[section: server\/cluster.ini\]/,/\[section: .*\]/p' "${dstconf}")
  echo "${step} Generating ${cluster_name}/cluster.ini"
  echo "[GAMEPLAY]
game_mode = $game_mode
max_players = $max_players
pvp = $pvp
pause_when_empty = $pause_when_empty
vote_enabled = $vote_enabled

[NETWORK]
offline_cluster = $offline_cluster
cluster_description = \"$cluster_description\"
cluster_name = \"$cluster_name\"
cluster_intention = $cluster_intention
cluster_password = $cluster_password
tick_rate = $tick_rate
whitelist_slots = $whitelist_slots
lan_only_cluster = $lan_only_cluster
auto_saver_enabled = $auto_saver_enabled

[MISC]
console_enabled = $console_enabled
max_snapshots = $max_snapshots

[SHARD]
shard_enabled = $shard_enabled
bind_ip = $bind_ip
master_ip = $master_ip
master_port = $master_port
cluster_key = $cluster_key
" > "${dstserverbase}/cluster.ini"
}


generate_master_server_ini() {
  step="[generate: master/server.ini]"
  echo "${step} Generating Master/server.ini"
  source <(sed -n '/\[section: server\/Master\/server.ini\]/,/\[section: .*\]/p' "${dstconf}")
echo "[NETWORK]
server_port = $server_port

[SHARD]
is_master = $is_master

[STEAM]
master_server_port = $master_server_port
authentication_port = $authentication_port
" > "${dstserverbase}/Master/server.ini"
}

generate_caves_server_ini() {
  step="[generate: caves/server.ini]"
  echo "${step} Generating Caves/server.ini"
  source <(sed -n '/\[section: server\/Caves\/server.ini\]/,/\[section: .*\]/p' "${dstconf}")
echo "[NETWORK]
server_port = $server_port

[SHARD]
is_master = $is_master
name = $name

[STEAM]
master_server_port = $master_server_port
authentication_port = $authentication_port
" > "${dstserverbase}/Caves/server.ini"

}

generate_caves_default_worldgen() {
  step="[generate: caves/worldgen]"
echo "${step} Generating Caves/worldgenoverride.lua"
echo "return {
  override_enabled = true,
  preset = "DST_CAVE",
}
" > "${dstserverbase}/Caves/worldgenoverride.lua"
}

generate_mods_scripts() {
  step="[generate: dedicated server mods script]"
  echo "$step Creating the runscript for mod configurations"
  cp "${modsfile}" "${dstserverbase}/mods.list"
  echo "# name: generate_mods_configs.sh
# description: this file was autogenerated by the https://github.com/jhosvr/dontstarvetogether repository's setup script

echo \"Generating mod config files\"
modlist=( \$(awk -F',' '{print \$1}' ${dstserverbase}/mods.list) )

# Back up current game mods file
mv -v \"${modsdir}/dedicated_server_mods_setup.lua\" \"${modsdir}/dedicated_server_mods_setup.lua-\$(date +%Y%m%d-%H%M)\"

# Generate game mods file
for modnumber in \"\${modlist[@]}\"; do
  echo \"ServerModSetup(\\\"\$modnumber\\\")\" >> \"${modsdir}/dedicated_server_mods_setup.lua\"
done

# Generate server mods file
echo \"return {\" > ${dstserverbase}/Master/modoverrides.lua
for modnumber in \"\${modlist[@]}\"; do
  echo \"[\\\"workshop-\$modnumber\\\"] = { enabled = true },\" >> ${dstserverbase}/Master/modoverrides.lua
done
echo \"}\" >> ${dstserverbase}/Master/modoverrides.lua

cp -p \"${dstserverbase}/Master/modoverrides.lua\" \"${dstserverbase}/Caves/modoverrides.lua\"
" > "${dstserverbase}/generate_mods_configs.sh"
chmod +x "${dstserverbase}/generate_mods_configs.sh"
}

generate_server_script() {
  scriptName="${cluster_name// /_}"
  startScript="${base}/start$scriptName.sh"
  step="[generate: server start script] Generating start script start$scriptName.sh"
  echo "${step}"
echo "#!/bin/bash
# name: $scriptName.sh
# description: this file was autogenerated by the https://github.com/jhosvr/dontstarvetogether repository's setup script

fail() {
  echo \"Error: \${1} >&2\"
  exit 1
}

fileSearch() {
  if [ ! -e \"\${1}\" ]; then
    fail Missing file: \"\${1}\"
  fi
}

cd \"$steamcmddir\" || fail \"Missing $steamcmddir directory!\"

fileSearch steamcmd.sh
fileSearch \"${dstserverbase}/cluster.ini\"
fileSearch \"${dstserverbase}/cluster_token.txt\"
fileSearch \"${dstserverbase}/Master/server.ini\"
fileSearch \"${dstserverbase}/Caves/server.ini\"

# Update DST via steam cmd
./steamcmd.sh +force_install_dir \"${dstgamedir}\" +login anonymous +app_update 343050 validate +quit

# Update deprecated symlinks
cd \"${dstgamedir}/bin/lib32\"
rm -f steamclient.so
ln -sf \"${steamcmddir}/linux32/steamclient.so\" \"steamclient.so\"

# generate necessary mod configs
cd \"${dstserverbase}\"
\"${dstserverbase}/generate_mods_configs.sh\" || fail \"could not generate mod config files\"

# Find DST binaries
fileSearch \"${dstgamedir}/bin\"
cd \"${dstgamedir}/bin\" || fail \"could not find ${dstserverbase}/bin\"

# Start DST
run_shared=(./dontstarve_dedicated_server_nullrenderer)
run_shared+=(-console)
run_shared+=(-cluster \"$cluster_name\")
run_shared+=(-monitor_parent_process \$\$)

\${run_shared[@]} -shard Caves  | sed 's/^/Caves:  /' &
\${run_shared[@]} -shard Master | sed 's/^/Master: /'
" > "${startScript}"
chmod +x "${startScript}"
}

